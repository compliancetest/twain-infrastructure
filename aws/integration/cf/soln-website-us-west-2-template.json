{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Resources" : 
  {
					
					"securityGroupXelbXwww" : {
					  "Type" : "AWS::EC2::SecurityGroup",
					  "Properties" : {
						"GroupDescription": "Security Group for elb-www",
						"VpcId": "vpc-09031b6c",
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01" },
							{ "Key" : "gs:project", "Value" : "twain" },
							{ "Key" : "gs:container", "Value" : "int" },
							{ "Key" : "gs:environment", "Value" : "int" },
							{ "Key" : "gs:category", "Value" : "test" },
							{ "Key" : "gs:tier", "Value" : "elb" },
							{ "Key" : "gs:component", "Value" : "www" },
							{ "Key" : "Name", "Value" : "twain-integration-elb-www" }
						]
					  }
					},
							"securityGroupIngressXelbXwwwX443" : {
							  "Type" : "AWS::EC2::SecurityGroupIngress",
							  "Properties" : {
								"GroupId": {"Ref" : "securityGroupXelbXwww"},
								"IpProtocol": "tcp", 
								"FromPort": "443", 
								"ToPort": "443", 
								"CidrIp": "0.0.0.0/0"
							  }
							},
						"elbXelbXwww" : {
						  "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
						  "Properties" : {
								"Subnets" : [
									"subnet-a0e8eed7"
								],
							"Listeners" : [ 
									{
									  "LoadBalancerPort" : "443",
									  "Protocol" : "HTTPS",
									  "InstancePort" : "80",
									  "InstanceProtocol" : "HTTP",
									  "SSLCertificateId" : { "Fn::Join" : ["", ["arn:aws:iam::", {"Ref" : "AWS::AccountId"}, ":server-certificate/ssl/ct01/ct01-ssl" ]] } 								  
									}
							],
							"HealthCheck" : {
							  "Target" : "HTTP:80/",
							  "HealthyThreshold" : "3",
							  "UnhealthyThreshold" : "5",
							  "Interval" : "30",
							  "Timeout" : "5"
							},
							"Scheme" : "internet-facing",
							"SecurityGroups":[ {"Ref" : "securityGroupXelbXwww"} ],
							"LoadBalancerName" : "twain-int-elb-www",
							"Tags" : [
								{ "Key" : "gs:account", "Value" : "ct01" },
								{ "Key" : "gs:project", "Value" : "twain" },
								{ "Key" : "gs:container", "Value" : "int" },
								{ "Key" : "gs:environment", "Value" : "int" },
								{ "Key" : "gs:category", "Value" : "test" },
								{ "Key" : "gs:tier", "Value" : "elb" },
								{ "Key" : "gs:component", "Value" : "www" },
								{ "Key" : "Name", "Value" : "twain-integration-elb-www" } 
							]
						  }
						}
					,
					"securityGroupXwebXwww" : {
					  "Type" : "AWS::EC2::SecurityGroup",
					  "Properties" : {
						"GroupDescription": "Security Group for web-www",
						"VpcId": "vpc-09031b6c",
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01" },
							{ "Key" : "gs:project", "Value" : "twain" },
							{ "Key" : "gs:container", "Value" : "int" },
							{ "Key" : "gs:environment", "Value" : "int" },
							{ "Key" : "gs:category", "Value" : "test" },
							{ "Key" : "gs:tier", "Value" : "web" },
							{ "Key" : "gs:component", "Value" : "www" },
							{ "Key" : "Name", "Value" : "twain-integration-web-www" }
						]
					  }
					},
							"securityGroupIngressXwebXwwwX80" : {
							  "Type" : "AWS::EC2::SecurityGroupIngress",
							  "Properties" : {
								"GroupId": {"Ref" : "securityGroupXwebXwww"},
								"IpProtocol": "tcp", 
								"FromPort": "80", 
								"ToPort": "80", 
								"CidrIp": "0.0.0.0/0"
							  }
							},
						
						"ecsXwebXwww" : {
						  "Type" : "AWS::ECS::Cluster"
						},
						
						"roleXwebXwww": {
						  "Type" : "AWS::IAM::Role",
						  "Properties" : {
							"AssumeRolePolicyDocument" : {
							  "Version": "2012-10-17",
							  "Statement": [ {
								"Effect": "Allow",
								"Principal": { "Service": [ "ec2.amazonaws.com" ] },
								"Action": [ "sts:AssumeRole" ]
							  } ]
							},
							"Path": "/",
							"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"],
							"Policies": [
							  {
								"PolicyName": "web-www-docker",
								"PolicyDocument" : {
								  "Version": "2012-10-17",
								  "Statement": [
									{
									  "Effect": "Allow",
									  "Action": ["s3:GetObject"],
									  "Resource": ["arn:aws:s3:::credentials.ct01.gosource.com.au/ct01/alm/docker/*"]
									},
									{
										"Resource": [
											"arn:aws:s3:::code.ct01.gosource.com.au"
										],
										"Action": [
											"s3:ListBucket"
										],
										"Effect": "Allow"
									},
									{
										"Resource": [
											"arn:aws:s3:::code.ct01.gosource.com.au/*"
										],
										"Action": [
											"s3:GetObject",
											"s3:ListObjects"
										],
										"Effect": "Allow"
									}
								  ]
								}
							  }
							]
						  }
						},
						
						"instanceProfileXwebXwww" : {
						  "Type" : "AWS::IAM::InstanceProfile",
						  "Properties" : {
							"Path" : "/",
							"Roles" : [ { "Ref" : "roleXwebXwww" } ]
						  }
						},
						
						"roleXwebXwwwXservice": {
						  "Type" : "AWS::IAM::Role",
						  "Properties" : {
							"AssumeRolePolicyDocument" : {
							  "Version": "2012-10-17",
							  "Statement": [ {
								"Effect": "Allow",
								"Principal": { "Service": [ "ecs.amazonaws.com" ] },
								"Action": [ "sts:AssumeRole" ]
							  } ]
							},
							"Path": "/",
							"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"]
						  }
						},
	
						"asgXwebXwww": {
						  "Type": "AWS::AutoScaling::AutoScalingGroup",
						  "Metadata": {
							"AWS::CloudFormation::Init": {
							  "configSets" : {
								"ecs" : ["dirs", "bootstrap", "ecs"]
							  },
							  "dirs": {
								"commands": {
								  "01Directories" : {
									"command" : "mkdir --parents --mode=0755 /etc/gosource && mkdir --parents --mode=0700 /opt/gosource/bootstrap && mkdir --parents --mode=0755 /var/log/gosource",
									"ignoreErrors" : "false"
								  }
								}
							  },
							  "bootstrap": {		  
								"packages" : {
									"yum" : {
										"aws-cli" : []
									}
								},
								"files" : {
								  "/etc/gosource/facts.sh" : {
									"content" : { "Fn::Join" : ["", [
											"#!/bin/bash\n",
											"echo \"gs:account=ct01\"\n",
											"echo \"gs:project=twain\"\n",
											"echo \"gs:container=int\"\n",
											"echo \"gs:environment=int\"\n",
											"echo \"gs:tier=web\"\n",
											"echo \"gs:component=www\"\n",
											"echo \"gs:role=ECS\"\n",
											"echo \"gs:credentials=credentials.ct01.gosource.com.au\"\n",
											"echo \"gs:code=code.ct01.gosource.com.au\"\n",
											"echo \"gs:configuration=configuration.ct01.gosource.com.au\"\n",
											"echo \"gs:logs=logs.ct01.gosource.com.au\"\n",
											"echo \"gs:backup=backup.ct01.gosource.com.au\"\n",
											"echo \"gs:region=ap-southeast-2\"\n"
										]]
									},
									"mode" : "000755"
								  },
								  "/opt/gosource/bootstrap/fetch.sh" : {
									"content" : { "Fn::Join" : ["", [
											"#!/bin/bash -ex\n",
											"exec > >(tee /var/log/gosource/fetch.log|logger -t gosource-fetch -s 2>/dev/console) 2>&1\n",
											"REGION=$(/etc/gosource/facts.sh | grep gs:region | cut -d '=' -f 2)\n",
											"CODE=$(/etc/gosource/facts.sh | grep gs:code | cut -d '=' -f 2)\n",
											"aws --region ${REGION} s3 sync s3://${CODE}/bootstrap/centos/ /opt/gosource/bootstrap && chmod 0500 /opt/gosource/bootstrap/*.sh\n"
										]]
									},
									"mode" : "000755"
								  }
								},
								"commands": {
								  "01Fetch" : {
									"command" : "/opt/gosource/bootstrap/fetch.sh",
									"ignoreErrors" : "false"
								  },
								  "02Initialise" : {
									"command" : "/opt/gosource/bootstrap/init.sh",
									"ignoreErrors" : "false"
								  }
								}
							  },
							  "ecs": {
								"commands": {
									"01ConfigureCluster" : {
										"command" : "/opt/gosource/bootstrap/ecs.sh",
										"env" : { "ECS_CLUSTER" : { "Ref" : "ecsXwebXwww" } },
										"ignoreErrors" : "false"
									}
								}
							  }
							}
						  },
						  "Properties": {
							"Cooldown" : "30",
							"LaunchConfigurationName": {"Ref": "launchConfigXwebXwww"},
								"MinSize": "1",
								"MaxSize": "1",
								"DesiredCapacity": "1",
								"VPCZoneIdentifier" : ["subnet-a1e8eed6"],
							"Tags" : [
								{ "Key" : "gs:account", "Value" : "ct01", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:project", "Value" : "twain", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:container", "Value" : "int", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:environment", "Value" : "int", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:category", "Value" : "test", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:tier", "Value" : "web", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:component", "Value" : "www", "PropagateAtLaunch" : "True"},
								{ "Key" : "Name", "Value" : "twain-integration-web-www", "PropagateAtLaunch" : "True" }
							]
						  }
						},
					
						"launchConfigXwebXwww": {
						  "Type": "AWS::AutoScaling::LaunchConfiguration",
						  "Properties": {
							"KeyName": "twain",
							"ImageId": "ami-ec75908c",
							"InstanceType": "t2.medium",
		"BlockDeviceMappings" : [
					{
						"DeviceName" : "/dev/sdp",
						"Ebs" : {
							"DeleteOnTermination" : true,
							"Encrypted" : false,
							"VolumeSize" : "20",
							"VolumeType" : "gp2"
						}
					},
			{
				"DeviceName" : "/dev/sdc",
				"VirtualName" : "ephemeral0"
			},
			{
				"DeviceName" : "/dev/sdt",
				"VirtualName" : "ephemeral1"
			}
		],
							"SecurityGroups" : [ {"Ref" : "securityGroupXwebXwww"} , "sg-d920f1be" ], 
							"IamInstanceProfile" : { "Ref" : "instanceProfileXwebXwww" },
							"AssociatePublicIpAddress": false,
							"UserData":{ "Fn::Base64" : { "Fn::Join" : ["", [
								"#!/bin/bash -ex\n",
								"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
								"yum install -y aws-cfn-bootstrap\n",
								"# Remainder of configuration via metadata\n",
								"/opt/aws/bin/cfn-init -v",
								"         --stack ", { "Ref" : "AWS::StackName" },
								"         --resource asgXwebXwww",
								"         --region us-west-2 --configsets ecs\n"
								] ] } }
						  }
						}
  },

  "Outputs" : 
  {
						
						"elbXelbXwww" : {
							"Value" : { "Ref" : "elbXelbXwww" }
						},
						"elbXelbXwwwXdns" : {
							"Value" : { "Fn::GetAtt" : ["elbXelbXwww", "DNSName"] }
						}
						,
						"ecsXwebXwww" : {
							"Value" : { "Ref" : "ecsXwebXwww" }
						},
						"roleXwebXwww" : {
							"Value" : { "Ref" : "roleXwebXwww" }
						},
						"roleXwebXwwwXarn" : {
							"Value" : { "Fn::GetAtt" : ["roleXwebXwww", "Arn"] }
						},
						"roleXwebXwwwXservice" : {
							"Value" : { "Ref" : "roleXwebXwwwXservice" }
						},
						"roleXwebXwwwXserviceXarn" : {
							"Value" : { "Fn::GetAtt" : ["roleXwebXwwwXservice", "Arn"] }
						}

  }
}



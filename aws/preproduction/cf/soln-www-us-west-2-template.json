
{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Resources" : 
  {
					
						"securityGroupXwebXwww" : {
						  "Type" : "AWS::EC2::SecurityGroup",
						  "Properties" : {
							"GroupDescription": "Security Group for web-www",
							"VpcId": "vpc-79b30b1d",
							"Tags" : [
								{ "Key" : "gs:account", "Value" : "ct01" },
								{ "Key" : "gs:project", "Value" : "twain" },
								{ "Key" : "gs:container", "Value" : "preprod" },
								{ "Key" : "gs:environment", "Value" : "preprod" },
								{ "Key" : "gs:category", "Value" : "stg" },
								{ "Key" : "gs:tier", "Value" : "web" },
								{ "Key" : "gs:component", "Value" : "www" },
								{ "Key" : "Name", "Value" : "twain-preproduction-web-www" }
							]
						  }
						},
											"securityGroupIngressXwebXwwwX80" : {
											  "Type" : "AWS::EC2::SecurityGroupIngress",
											  "Properties" : {
												"GroupId": {"Ref" : "securityGroupXwebXwww"},
												"IpProtocol": "tcp", 
												"FromPort": "80", 
												"ToPort": "80", 
													"CidrIp": "0.0.0.0/0"
											  }
											},
						
						"ecsXwebXwww" : {
						  "Type" : "AWS::ECS::Cluster"
						},
						
						"roleXwebXwww": {
						  "Type" : "AWS::IAM::Role",
						  "Properties" : {
							"AssumeRolePolicyDocument" : {
							  "Version": "2012-10-17",
							  "Statement": [ {
								"Effect": "Allow",
								"Principal": { "Service": [ "ec2.amazonaws.com" ] },
								"Action": [ "sts:AssumeRole" ]
							  } ]
							},
							"Path": "/",
							"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"],
							"Policies": [
							  {
								"PolicyName": "web-www-docker",
								"PolicyDocument" : {
								  "Version": "2012-10-17",
								  "Statement": [
									{
									  "Effect": "Allow",
									  "Action": ["s3:GetObject"],
									  "Resource": ["arn:aws:s3:::credentials.ct01.gosource.com.au/ct01/alm/docker/*"]
									},
									{
										"Resource": [
											"arn:aws:s3:::code.ct01.gosource.com.au",
											"arn:aws:s3:::logs.preproduction.twain.gosource.com.au"
										],
										"Action": [
											"s3:List*"
										],
										"Effect": "Allow"
									},
									{
										"Resource": [
											"arn:aws:s3:::code.ct01.gosource.com.au/*"
										],
										"Action": [
											"s3:GetObject"
										],
										"Effect": "Allow"
									},
									{
										"Resource": [
											"arn:aws:s3:::logs.preproduction.twain.gosource.com.au/*"
										],
										"Action": [
											"s3:PutObject"
										],
										"Effect": "Allow"
									}
								  ]
								}
							  }
							]
						  }
						},
						
						"instanceProfileXwebXwww" : {
						  "Type" : "AWS::IAM::InstanceProfile",
						  "Properties" : {
							"Path" : "/",
							"Roles" : [ { "Ref" : "roleXwebXwww" } ]
						  }
						},
						
						"roleXwebXwwwXservice": {
						  "Type" : "AWS::IAM::Role",
						  "Properties" : {
							"AssumeRolePolicyDocument" : {
							  "Version": "2012-10-17",
							  "Statement": [ {
								"Effect": "Allow",
								"Principal": { "Service": [ "ecs.amazonaws.com" ] },
								"Action": [ "sts:AssumeRole" ]
							  } ]
							},
							"Path": "/",
							"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"]
						  }
						},

						
						"asgXwebXwww": {
						  "Type": "AWS::AutoScaling::AutoScalingGroup",
						  "Metadata": {
							"AWS::CloudFormation::Init": {
							  "configSets" : {
								"ecs" : ["dirs", "bootstrap", "ecs"]
							  },
							  "dirs": {
								"commands": {
								  "01Directories" : {
									"command" : "mkdir --parents --mode=0755 /etc/gosource && mkdir --parents --mode=0755 /opt/gosource/bootstrap && mkdir --parents --mode=0755 /var/log/gosource",
									"ignoreErrors" : "false"
								  }
								}
							  },
							  "bootstrap": {		  
								"packages" : {
									"yum" : {
										"aws-cli" : []
									}
								},
								"files" : {
								  "/etc/gosource/facts.sh" : {
									"content" : { "Fn::Join" : ["", [
											"#!/bin/bash\n",
											"echo \"gs:accountRegion=ap-southeast-2\"\n",
											"echo \"gs:account=ct01\"\n",
											"echo \"gs:project=twain\"\n",
											"echo \"gs:region=us-west-2\"\n",
											"echo \"gs:container=preprod\"\n",
											"echo \"gs:environment=preprod\"\n",
											"echo \"gs:tier=web\"\n",
											"echo \"gs:component=www\"\n",
											"echo \"gs:role=ECS\"\n",
											"echo \"gs:credentials=credentials.ct01.gosource.com.au\"\n",
											"echo \"gs:code=code.ct01.gosource.com.au\"\n",
											"echo \"gs:logs=logs.preproduction.twain.gosource.com.au\"\n",
											"echo \"gs:backup=backups.preproduction.twain.gosource.com.au\"\n"
										]]
									},
									"mode" : "000755"
								  },
								  "/opt/gosource/bootstrap/fetch.sh" : {
									"content" : { "Fn::Join" : ["", [
											"#!/bin/bash -ex\n",
											"exec > >(tee /var/log/gosource/fetch.log|logger -t gosource-fetch -s 2>/dev/console) 2>&1\n",
											"REGION=$(/etc/gosource/facts.sh | grep gs:accountRegion= | cut -d '=' -f 2)\n",
											"CODE=$(/etc/gosource/facts.sh | grep gs:code= | cut -d '=' -f 2)\n",
											"aws --region ${REGION} s3 sync s3://${CODE}/bootstrap/centos/ /opt/gosource/bootstrap && chmod 0755 /opt/gosource/bootstrap/*.sh\n"
										]]
									},
									"mode" : "000755"
								  }
								},
								"commands": {
								  "01Fetch" : {
									"command" : "/opt/gosource/bootstrap/fetch.sh",
									"ignoreErrors" : "false"
								  },
								  "02Initialise" : {
									"command" : "/opt/gosource/bootstrap/init.sh",
									"ignoreErrors" : "false"
								  }
								}
							  },
							  "ecs": {
								"commands": {
									"01Fluentd" : {
										"command" : "/opt/gosource/bootstrap/fluentd.sh",
										"ignoreErrors" : "false"
									},
									"02ConfigureCluster" : {
										"command" : "/opt/gosource/bootstrap/ecs.sh",
										"env" : { 
											"ECS_CLUSTER" : { "Ref" : "ecsXwebXwww" },
											"ECS_LOG_DRIVER" : "fluentd"
										},
										"ignoreErrors" : "false"
									}
								}
							  }
							}
						  },
						  "Properties": {
							"Cooldown" : "30",
							"LaunchConfigurationName": {"Ref": "launchConfigXwebXwww"},
								"MinSize": "1",
								"MaxSize": "1",
								"DesiredCapacity": "1",
								"VPCZoneIdentifier" : ["subnet-b8ce10ce"],
							"Tags" : [
								{ "Key" : "gs:account", "Value" : "ct01", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:project", "Value" : "twain", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:container", "Value" : "preprod", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:environment", "Value" : "preprod", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:category", "Value" : "stg", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:tier", "Value" : "web", "PropagateAtLaunch" : "True" },
								{ "Key" : "gs:component", "Value" : "www", "PropagateAtLaunch" : "True"},
								{ "Key" : "Name", "Value" : "twain-preproduction-web-www", "PropagateAtLaunch" : "True" }
							]
						  }
						},
					
						"launchConfigXwebXwww": {
						  "Type": "AWS::AutoScaling::LaunchConfiguration",
						  "Properties": {
							"KeyName": "twain",
							"ImageId": "ami-c7a451a7",
							"InstanceType": "t2.medium",
							"SecurityGroups" : [ {"Ref" : "securityGroupXwebXwww"} , "sg-dde40dbb" ], 
							"IamInstanceProfile" : { "Ref" : "instanceProfileXwebXwww" },
							"AssociatePublicIpAddress" : false,
							"UserData":{ "Fn::Base64" : { "Fn::Join" : ["", [
								"#!/bin/bash -ex\n",
								"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
								"yum install -y aws-cfn-bootstrap\n",
								"# Remainder of configuration via metadata\n",
								"/opt/aws/bin/cfn-init -v",
								"         --stack ", { "Ref" : "AWS::StackName" },
								"         --resource asgXwebXwww",
								"         --region us-west-2 --configsets ecs\n"
								] ] } }
						  }
						}
  },

  "Outputs" : 
  {
						
						"securityGroupXwebXwww" : {
							"Value" : { "Ref" : "securityGroupXwebXwww" }
						}
						,
						"ecsXwebXwww" : {
							"Value" : { "Ref" : "ecsXwebXwww" }
						},
						"roleXwebXwww" : {
							"Value" : { "Ref" : "roleXwebXwww" }
						},
						"roleXwebXwwwXarn" : {
							"Value" : { "Fn::GetAtt" : ["roleXwebXwww", "Arn"] }
						},
						"roleXwebXwwwXservice" : {
							"Value" : { "Ref" : "roleXwebXwwwXservice" }
						},
						"roleXwebXwwwXserviceXarn" : {
							"Value" : { "Fn::GetAtt" : ["roleXwebXwwwXservice", "Arn"] }
						}

  }
}



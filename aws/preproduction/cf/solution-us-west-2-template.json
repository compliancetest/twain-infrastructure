{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Resources" : 
  {
				
				"securityGroupXelbXwww" : {
				  "Type" : "AWS::EC2::SecurityGroup",
				  "Properties" : {
					"GroupDescription": "Security Group for elb-www",
					"VpcId": "vpc-ca676baf",
					"Tags" : [
						{ "Key" : "gs:account", "Value" : "ct01" },
						{ "Key" : "gs:project", "Value" : "twain" },
						{ "Key" : "gs:container", "Value" : "preprod" },
						{ "Key" : "gs:environment", "Value" : "preprod" },
						{ "Key" : "gs:category", "Value" : "stg" },
						{ "Key" : "gs:tier", "Value" : "elb" },
						{ "Key" : "gs:component", "Value" : "www" },
						{ "Key" : "Name", "Value" : "twain-preproduction-elb-www" }
					]
				  }
				},
						"securityGroupIngressXelbXwwwX443" : {
						  "Type" : "AWS::EC2::SecurityGroupIngress",
						  "Properties" : {
							"GroupId": {"Ref" : "securityGroupXelbXwww"},
							"IpProtocol": "tcp", 
							"FromPort": "443", 
							"ToPort": "443", 
							"CidrIp": "0.0.0.0/0"
						  }
						},
					"elbXelbXwww" : {
					  "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
					  "Properties" : {
							"Subnets" : [
								"subnet-d9c9fdae"
							],
						"Listeners" : [ 
								{
								  "LoadBalancerPort" : "443",
								  "Protocol" : "HTTPS",
								  "InstancePort" : "80",
								  "InstanceProtocol" : "HTTP",
								  "SSLCertificateId" : { "Fn::Join" : ["", ["arn:aws:iam::", {"Ref" : "AWS::AccountId"}, ":server-certificate/ssl/ct01/ct01-ssl" ]] } 								  
							  	}
						],
						"HealthCheck" : {
						  "Target" : "HTTP:80/",
						  "HealthyThreshold" : "3",
						  "UnhealthyThreshold" : "5",
						  "Interval" : "30",
						  "Timeout" : "5"
						},
						"Scheme" : "internet-facing",
						"SecurityGroups":[ {"Ref" : "securityGroupXelbXwww"} ],
						"LoadBalancerName" : "twain-preprod-elb-www",
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01" },
							{ "Key" : "gs:project", "Value" : "twain" },
							{ "Key" : "gs:container", "Value" : "preprod" },
							{ "Key" : "gs:environment", "Value" : "preprod" },
							{ "Key" : "gs:category", "Value" : "stg" },
							{ "Key" : "gs:tier", "Value" : "elb" },
							{ "Key" : "gs:component", "Value" : "www" },
							{ "Key" : "Name", "Value" : "twain-preproduction-elb-www" } 
						]
					  }
					}
				,
				"securityGroupXelbXagent" : {
				  "Type" : "AWS::EC2::SecurityGroup",
				  "Properties" : {
					"GroupDescription": "Security Group for elb-agent",
					"VpcId": "vpc-ca676baf",
					"Tags" : [
						{ "Key" : "gs:account", "Value" : "ct01" },
						{ "Key" : "gs:project", "Value" : "twain" },
						{ "Key" : "gs:container", "Value" : "preprod" },
						{ "Key" : "gs:environment", "Value" : "preprod" },
						{ "Key" : "gs:category", "Value" : "stg" },
						{ "Key" : "gs:tier", "Value" : "elb" },
						{ "Key" : "gs:component", "Value" : "agent" },
						{ "Key" : "Name", "Value" : "twain-preproduction-elb-agent" }
					]
				  }
				},
						"securityGroupIngressXelbXagentX443" : {
						  "Type" : "AWS::EC2::SecurityGroupIngress",
						  "Properties" : {
							"GroupId": {"Ref" : "securityGroupXelbXagent"},
							"IpProtocol": "tcp", 
							"FromPort": "443", 
							"ToPort": "443", 
							"CidrIp": "0.0.0.0/0"
						  }
						},
					"elbXelbXagent" : {
					  "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
					  "Properties" : {
							"Subnets" : [
								"subnet-d9c9fdae"
							],
						"Listeners" : [ 
								{
								  "LoadBalancerPort" : "443",
								  "Protocol" : "HTTPS",
								  "InstancePort" : "80",
								  "InstanceProtocol" : "HTTP",
								  "SSLCertificateId" : { "Fn::Join" : ["", ["arn:aws:iam::", {"Ref" : "AWS::AccountId"}, ":server-certificate/ssl/ct01/ct01-ssl" ]] } 								  
							  	}
						],
						"HealthCheck" : {
						  "Target" : "HTTP:80/",
						  "HealthyThreshold" : "3",
						  "UnhealthyThreshold" : "5",
						  "Interval" : "30",
						  "Timeout" : "5"
						},
						"Scheme" : "internet-facing",
						"SecurityGroups":[ {"Ref" : "securityGroupXelbXagent"} ],
						"LoadBalancerName" : "twain-preprod-elb-agent",
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01" },
							{ "Key" : "gs:project", "Value" : "twain" },
							{ "Key" : "gs:container", "Value" : "preprod" },
							{ "Key" : "gs:environment", "Value" : "preprod" },
							{ "Key" : "gs:category", "Value" : "stg" },
							{ "Key" : "gs:tier", "Value" : "elb" },
							{ "Key" : "gs:component", "Value" : "agent" },
							{ "Key" : "Name", "Value" : "twain-preproduction-elb-agent" } 
						]
					  }
					}
				,
				"securityGroupXelbXsim" : {
				  "Type" : "AWS::EC2::SecurityGroup",
				  "Properties" : {
					"GroupDescription": "Security Group for elb-sim",
					"VpcId": "vpc-ca676baf",
					"Tags" : [
						{ "Key" : "gs:account", "Value" : "ct01" },
						{ "Key" : "gs:project", "Value" : "twain" },
						{ "Key" : "gs:container", "Value" : "preprod" },
						{ "Key" : "gs:environment", "Value" : "preprod" },
						{ "Key" : "gs:category", "Value" : "stg" },
						{ "Key" : "gs:tier", "Value" : "elb" },
						{ "Key" : "gs:component", "Value" : "sim" },
						{ "Key" : "Name", "Value" : "twain-preproduction-elb-sim" }
					]
				  }
				},
						"securityGroupIngressXelbXsimX443" : {
						  "Type" : "AWS::EC2::SecurityGroupIngress",
						  "Properties" : {
							"GroupId": {"Ref" : "securityGroupXelbXsim"},
							"IpProtocol": "tcp", 
							"FromPort": "443", 
							"ToPort": "443", 
							"CidrIp": "0.0.0.0/0"
						  }
						},
					"elbXelbXsim" : {
					  "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
					  "Properties" : {
							"Subnets" : [
								"subnet-d9c9fdae"
							],
						"Listeners" : [ 
								{
								  "LoadBalancerPort" : "443",
								  "Protocol" : "HTTPS",
								  "InstancePort" : "80",
								  "InstanceProtocol" : "HTTP",
								  "SSLCertificateId" : { "Fn::Join" : ["", ["arn:aws:iam::", {"Ref" : "AWS::AccountId"}, ":server-certificate/ssl/ct01/ct01-ssl" ]] } 								  
							  	}
						],
						"HealthCheck" : {
						  "Target" : "HTTP:80/",
						  "HealthyThreshold" : "3",
						  "UnhealthyThreshold" : "5",
						  "Interval" : "30",
						  "Timeout" : "5"
						},
						"Scheme" : "internet-facing",
						"SecurityGroups":[ {"Ref" : "securityGroupXelbXsim"} ],
						"LoadBalancerName" : "twain-preprod-elb-sim",
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01" },
							{ "Key" : "gs:project", "Value" : "twain" },
							{ "Key" : "gs:container", "Value" : "preprod" },
							{ "Key" : "gs:environment", "Value" : "preprod" },
							{ "Key" : "gs:category", "Value" : "stg" },
							{ "Key" : "gs:tier", "Value" : "elb" },
							{ "Key" : "gs:component", "Value" : "sim" },
							{ "Key" : "Name", "Value" : "twain-preproduction-elb-sim" } 
						]
					  }
					}
				,
				"securityGroupXwebXwww" : {
				  "Type" : "AWS::EC2::SecurityGroup",
				  "Properties" : {
					"GroupDescription": "Security Group for web-www",
					"VpcId": "vpc-ca676baf",
					"Tags" : [
						{ "Key" : "gs:account", "Value" : "ct01" },
						{ "Key" : "gs:project", "Value" : "twain" },
						{ "Key" : "gs:container", "Value" : "preprod" },
						{ "Key" : "gs:environment", "Value" : "preprod" },
						{ "Key" : "gs:category", "Value" : "stg" },
						{ "Key" : "gs:tier", "Value" : "web" },
						{ "Key" : "gs:component", "Value" : "www" },
						{ "Key" : "Name", "Value" : "twain-preproduction-web-www" }
					]
				  }
				},
						"securityGroupIngressXwebXwwwX80" : {
						  "Type" : "AWS::EC2::SecurityGroupIngress",
						  "Properties" : {
							"GroupId": {"Ref" : "securityGroupXwebXwww"},
							"IpProtocol": "tcp", 
							"FromPort": "80", 
							"ToPort": "80", 
							"CidrIp": "0.0.0.0/0"
						  }
						},
					
					"ecsXwebXwww" : {
					  "Type" : "AWS::ECS::Cluster"
					},
					
					"roleXwebXwwwXinstance": {
					  "Type" : "AWS::IAM::Role",
					  "Properties" : {
						"AssumeRolePolicyDocument" : {
						  "Version": "2012-10-17",
						  "Statement": [ {
							"Effect": "Allow",
							"Principal": { "Service": [ "ec2.amazonaws.com" ] },
							"Action": [ "sts:AssumeRole" ]
						  } ]
						},
						"Path": "/",
						"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"],
						"Policies": [
						  {
							"PolicyName": "web-www-docker",
							"PolicyDocument" : {
							  "Version": "2012-10-17",
							  "Statement": [
								{
								  "Effect": "Allow",
								  "Action": ["s3:GetObject"],
								  "Resource": ["arn:aws:s3:::credentials.ct01.gosource.com.au/ct01/alm/docker/*"]
								},
								{
									"Resource": [
										"arn:aws:s3:::code.ct01.gosource.com.au"
									],
									"Action": [
										"s3:ListBucket"
									],
									"Effect": "Allow"
								},
								{
									"Resource": [
										"arn:aws:s3:::code.ct01.gosource.com.au/*"
									],
									"Action": [
										"s3:GetObject",
										"s3:ListObjects"
									],
									"Effect": "Allow"
								}
							  ]
						    }
						  }
						]
					  }
					},
					
					"instanceProfileXwebXwww" : {
					  "Type" : "AWS::IAM::InstanceProfile",
					  "Properties" : {
						"Path" : "/",
						"Roles" : [ { "Ref" : "roleXwebXwwwXinstance" } ]
					  }
					},
					
					"roleXwebXwwwXservice": {
					  "Type" : "AWS::IAM::Role",
					  "Properties" : {
						"AssumeRolePolicyDocument" : {
						  "Version": "2012-10-17",
						  "Statement": [ {
							"Effect": "Allow",
							"Principal": { "Service": [ "ecs.amazonaws.com" ] },
							"Action": [ "sts:AssumeRole" ]
						  } ]
						},
						"Path": "/",
						"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"]
					  }
					},

					"asgXwebXwww": {
					  "Type": "AWS::AutoScaling::AutoScalingGroup",
					  "Metadata": {
						"AWS::CloudFormation::Init": {
						  "configSets" : {
							"ecs" : ["dirs", "bootstrap", "ecs"]
						  },
						  "dirs": {
							"commands": {
							  "01Directories" : {
								"command" : "mkdir --parents --mode=0755 /etc/gosource && mkdir --parents --mode=0700 /opt/gosource/bootstrap && mkdir --parents --mode=0755 /var/log/gosource",
								"ignoreErrors" : "false"
							  }
							}
						  },
						  "bootstrap": {		  
							"packages" : {
								"yum" : {
									"aws-cli" : []
								}
							},
							"files" : {
							  "/etc/gosource/facts.sh" : {
								"content" : { "Fn::Join" : ["", [
										"#!/bin/bash\n",
										"echo \"gs:account=ct01\"\n",
										"echo \"gs:project=twain\"\n",
										"echo \"gs:container=preprod\"\n",
										"echo \"gs:environment=preprod\"\n",
										"echo \"gs:tier=web\"\n",
										"echo \"gs:component=www\"\n",
										"echo \"gs:role=ECS\"\n",
										"echo \"gs:credentials=credentials.ct01.gosource.com.au\"\n",
										"echo \"gs:code=code.ct01.gosource.com.au\"\n",
										"echo \"gs:configuration=configuration.ct01.gosource.com.au\"\n",
										"echo \"gs:logs=logs.ct01.gosource.com.au\"\n",
										"echo \"gs:backup=backup.ct01.gosource.com.au\"\n",
										"echo \"gs:region=ap-southeast-2\"\n"
									]]
								},
								"mode" : "000755"
							  },
							  "/opt/gosource/bootstrap/fetch.sh" : {
								"content" : { "Fn::Join" : ["", [
										"#!/bin/bash -ex\n",
										"exec > >(tee /var/log/gosource/fetch.log|logger -t gosource-fetch -s 2>/dev/console) 2>&1\n",
										"REGION=$(/etc/gosource/facts.sh | grep gs:region | cut -d '=' -f 2)\n",
										"CODE=$(/etc/gosource/facts.sh | grep gs:code | cut -d '=' -f 2)\n",
										"aws --region ${REGION} s3 sync s3://${CODE}/bootstrap/centos/ /opt/gosource/bootstrap && chmod 0500 /opt/gosource/bootstrap/*.sh\n"
									]]
								},
								"mode" : "000755"
							  }
							},
							"commands": {
							  "01Fetch" : {
								"command" : "/opt/gosource/bootstrap/fetch.sh",
								"ignoreErrors" : "false"
							  },
							  "02Initialise" : {
								"command" : "/opt/gosource/bootstrap/init.sh",
								"ignoreErrors" : "false"
							  }
							}
						  },
						  "ecs": {
							"commands": {
								"01ConfigureCluster" : {
									"command" : "/opt/gosource/bootstrap/ecs.sh",
									"env" : { "ECS_CLUSTER" : { "Ref" : "ecsXwebXwww" } },
									"ignoreErrors" : "false"
								}
							}
						  }
						}
					  },
					  "Properties": {
						"Cooldown" : "30",
						"LaunchConfigurationName": {"Ref": "launchConfigXwebXwww"},
							"MinSize": "1",
							"MaxSize": "1",
							"DesiredCapacity": "1",
							"VPCZoneIdentifier" : ["subnet-ddc9fdaa"],
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:project", "Value" : "twain", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:container", "Value" : "preprod", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:environment", "Value" : "preprod", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:category", "Value" : "stg", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:tier", "Value" : "web", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:component", "Value" : "www", "PropagateAtLaunch" : "True"},
							{ "Key" : "Name", "Value" : "twain-preproduction-web-www", "PropagateAtLaunch" : "True" }
						]
					  }
					},
				
					"launchConfigXwebXwww": {
					  "Type": "AWS::AutoScaling::LaunchConfiguration",
					  "Properties": {
						"KeyName": "twain",
						"ImageId": "ami-313d2150",
						"InstanceType": "t2.micro",
						"SecurityGroups" : [ {"Ref" : "securityGroupXwebXwww"} , "sg-76e10111" ], 
						"IamInstanceProfile" : { "Ref" : "instanceProfileXwebXwww" },
						"AssociatePublicIpAddress": false,
						"UserData":{ "Fn::Base64" : { "Fn::Join" : ["", [
							"#!/bin/bash -ex\n",
							"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
							"yum install -y aws-cfn-bootstrap\n",
							"# Remainder of configuration via metadata\n",
							"/opt/aws/bin/cfn-init -v",
							"         --stack ", { "Ref" : "AWS::StackName" },
							"         --resource asgXwebXwww",
							"         --region us-west-2 --configsets ecs\n"
							] ] } }
					  }
					}
				,
				"securityGroupXappXagent" : {
				  "Type" : "AWS::EC2::SecurityGroup",
				  "Properties" : {
					"GroupDescription": "Security Group for application-agent",
					"VpcId": "vpc-ca676baf",
					"Tags" : [
						{ "Key" : "gs:account", "Value" : "ct01" },
						{ "Key" : "gs:project", "Value" : "twain" },
						{ "Key" : "gs:container", "Value" : "preprod" },
						{ "Key" : "gs:environment", "Value" : "preprod" },
						{ "Key" : "gs:category", "Value" : "stg" },
						{ "Key" : "gs:tier", "Value" : "app" },
						{ "Key" : "gs:component", "Value" : "agent" },
						{ "Key" : "Name", "Value" : "twain-preproduction-application-agent" }
					]
				  }
				},
						"securityGroupIngressXappXagentX80" : {
						  "Type" : "AWS::EC2::SecurityGroupIngress",
						  "Properties" : {
							"GroupId": {"Ref" : "securityGroupXappXagent"},
							"IpProtocol": "tcp", 
							"FromPort": "80", 
							"ToPort": "80", 
							"CidrIp": "0.0.0.0/0"
						  }
						},
					
					"ecsXappXagent" : {
					  "Type" : "AWS::ECS::Cluster"
					},
					
					"roleXappXagentXinstance": {
					  "Type" : "AWS::IAM::Role",
					  "Properties" : {
						"AssumeRolePolicyDocument" : {
						  "Version": "2012-10-17",
						  "Statement": [ {
							"Effect": "Allow",
							"Principal": { "Service": [ "ec2.amazonaws.com" ] },
							"Action": [ "sts:AssumeRole" ]
						  } ]
						},
						"Path": "/",
						"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"],
						"Policies": [
						  {
							"PolicyName": "app-agent-docker",
							"PolicyDocument" : {
							  "Version": "2012-10-17",
							  "Statement": [
								{
								  "Effect": "Allow",
								  "Action": ["s3:GetObject"],
								  "Resource": ["arn:aws:s3:::credentials.ct01.gosource.com.au/ct01/alm/docker/*"]
								},
								{
									"Resource": [
										"arn:aws:s3:::code.ct01.gosource.com.au"
									],
									"Action": [
										"s3:ListBucket"
									],
									"Effect": "Allow"
								},
								{
									"Resource": [
										"arn:aws:s3:::code.ct01.gosource.com.au/*"
									],
									"Action": [
										"s3:GetObject",
										"s3:ListObjects"
									],
									"Effect": "Allow"
								}
							  ]
						    }
						  }
						]
					  }
					},
					
					"instanceProfileXappXagent" : {
					  "Type" : "AWS::IAM::InstanceProfile",
					  "Properties" : {
						"Path" : "/",
						"Roles" : [ { "Ref" : "roleXappXagentXinstance" } ]
					  }
					},
					
					"roleXappXagentXservice": {
					  "Type" : "AWS::IAM::Role",
					  "Properties" : {
						"AssumeRolePolicyDocument" : {
						  "Version": "2012-10-17",
						  "Statement": [ {
							"Effect": "Allow",
							"Principal": { "Service": [ "ecs.amazonaws.com" ] },
							"Action": [ "sts:AssumeRole" ]
						  } ]
						},
						"Path": "/",
						"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"]
					  }
					},

					"asgXappXagent": {
					  "Type": "AWS::AutoScaling::AutoScalingGroup",
					  "Metadata": {
						"AWS::CloudFormation::Init": {
						  "configSets" : {
							"ecs" : ["dirs", "bootstrap", "ecs"]
						  },
						  "dirs": {
							"commands": {
							  "01Directories" : {
								"command" : "mkdir --parents --mode=0755 /etc/gosource && mkdir --parents --mode=0700 /opt/gosource/bootstrap && mkdir --parents --mode=0755 /var/log/gosource",
								"ignoreErrors" : "false"
							  }
							}
						  },
						  "bootstrap": {		  
							"packages" : {
								"yum" : {
									"aws-cli" : []
								}
							},
							"files" : {
							  "/etc/gosource/facts.sh" : {
								"content" : { "Fn::Join" : ["", [
										"#!/bin/bash\n",
										"echo \"gs:account=ct01\"\n",
										"echo \"gs:project=twain\"\n",
										"echo \"gs:container=preprod\"\n",
										"echo \"gs:environment=preprod\"\n",
										"echo \"gs:tier=app\"\n",
										"echo \"gs:component=agent\"\n",
										"echo \"gs:role=ECS\"\n",
										"echo \"gs:credentials=credentials.ct01.gosource.com.au\"\n",
										"echo \"gs:code=code.ct01.gosource.com.au\"\n",
										"echo \"gs:configuration=configuration.ct01.gosource.com.au\"\n",
										"echo \"gs:logs=logs.ct01.gosource.com.au\"\n",
										"echo \"gs:backup=backup.ct01.gosource.com.au\"\n",
										"echo \"gs:region=ap-southeast-2\"\n"
									]]
								},
								"mode" : "000755"
							  },
							  "/opt/gosource/bootstrap/fetch.sh" : {
								"content" : { "Fn::Join" : ["", [
										"#!/bin/bash -ex\n",
										"exec > >(tee /var/log/gosource/fetch.log|logger -t gosource-fetch -s 2>/dev/console) 2>&1\n",
										"REGION=$(/etc/gosource/facts.sh | grep gs:region | cut -d '=' -f 2)\n",
										"CODE=$(/etc/gosource/facts.sh | grep gs:code | cut -d '=' -f 2)\n",
										"aws --region ${REGION} s3 sync s3://${CODE}/bootstrap/centos/ /opt/gosource/bootstrap && chmod 0500 /opt/gosource/bootstrap/*.sh\n"
									]]
								},
								"mode" : "000755"
							  }
							},
							"commands": {
							  "01Fetch" : {
								"command" : "/opt/gosource/bootstrap/fetch.sh",
								"ignoreErrors" : "false"
							  },
							  "02Initialise" : {
								"command" : "/opt/gosource/bootstrap/init.sh",
								"ignoreErrors" : "false"
							  }
							}
						  },
						  "ecs": {
							"commands": {
								"01ConfigureCluster" : {
									"command" : "/opt/gosource/bootstrap/ecs.sh",
									"env" : { "ECS_CLUSTER" : { "Ref" : "ecsXappXagent" } },
									"ignoreErrors" : "false"
								}
							}
						  }
						}
					  },
					  "Properties": {
						"Cooldown" : "30",
						"LaunchConfigurationName": {"Ref": "launchConfigXappXagent"},
							"MinSize": "1",
							"MaxSize": "1",
							"DesiredCapacity": "1",
							"VPCZoneIdentifier" : ["subnet-dac9fdad"],
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:project", "Value" : "twain", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:container", "Value" : "preprod", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:environment", "Value" : "preprod", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:category", "Value" : "stg", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:tier", "Value" : "app", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:component", "Value" : "agent", "PropagateAtLaunch" : "True"},
							{ "Key" : "Name", "Value" : "twain-preproduction-application-agent", "PropagateAtLaunch" : "True" }
						]
					  }
					},
				
					"launchConfigXappXagent": {
					  "Type": "AWS::AutoScaling::LaunchConfiguration",
					  "Properties": {
						"KeyName": "twain",
						"ImageId": "ami-313d2150",
						"InstanceType": "t2.micro",
						"SecurityGroups" : [ {"Ref" : "securityGroupXappXagent"} , "sg-76e10111" ], 
						"IamInstanceProfile" : { "Ref" : "instanceProfileXappXagent" },
						"AssociatePublicIpAddress": false,
						"UserData":{ "Fn::Base64" : { "Fn::Join" : ["", [
							"#!/bin/bash -ex\n",
							"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
							"yum install -y aws-cfn-bootstrap\n",
							"# Remainder of configuration via metadata\n",
							"/opt/aws/bin/cfn-init -v",
							"         --stack ", { "Ref" : "AWS::StackName" },
							"         --resource asgXappXagent",
							"         --region us-west-2 --configsets ecs\n"
							] ] } }
					  }
					}
				,
				"securityGroupXappXsim" : {
				  "Type" : "AWS::EC2::SecurityGroup",
				  "Properties" : {
					"GroupDescription": "Security Group for application-sim",
					"VpcId": "vpc-ca676baf",
					"Tags" : [
						{ "Key" : "gs:account", "Value" : "ct01" },
						{ "Key" : "gs:project", "Value" : "twain" },
						{ "Key" : "gs:container", "Value" : "preprod" },
						{ "Key" : "gs:environment", "Value" : "preprod" },
						{ "Key" : "gs:category", "Value" : "stg" },
						{ "Key" : "gs:tier", "Value" : "app" },
						{ "Key" : "gs:component", "Value" : "sim" },
						{ "Key" : "Name", "Value" : "twain-preproduction-application-sim" }
					]
				  }
				},
						"securityGroupIngressXappXsimX80" : {
						  "Type" : "AWS::EC2::SecurityGroupIngress",
						  "Properties" : {
							"GroupId": {"Ref" : "securityGroupXappXsim"},
							"IpProtocol": "tcp", 
							"FromPort": "80", 
							"ToPort": "80", 
							"CidrIp": "0.0.0.0/0"
						  }
						},
					
					"ecsXappXsim" : {
					  "Type" : "AWS::ECS::Cluster"
					},
					
					"roleXappXsimXinstance": {
					  "Type" : "AWS::IAM::Role",
					  "Properties" : {
						"AssumeRolePolicyDocument" : {
						  "Version": "2012-10-17",
						  "Statement": [ {
							"Effect": "Allow",
							"Principal": { "Service": [ "ec2.amazonaws.com" ] },
							"Action": [ "sts:AssumeRole" ]
						  } ]
						},
						"Path": "/",
						"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"],
						"Policies": [
						  {
							"PolicyName": "app-sim-docker",
							"PolicyDocument" : {
							  "Version": "2012-10-17",
							  "Statement": [
								{
								  "Effect": "Allow",
								  "Action": ["s3:GetObject"],
								  "Resource": ["arn:aws:s3:::credentials.ct01.gosource.com.au/ct01/alm/docker/*"]
								},
								{
									"Resource": [
										"arn:aws:s3:::code.ct01.gosource.com.au"
									],
									"Action": [
										"s3:ListBucket"
									],
									"Effect": "Allow"
								},
								{
									"Resource": [
										"arn:aws:s3:::code.ct01.gosource.com.au/*"
									],
									"Action": [
										"s3:GetObject",
										"s3:ListObjects"
									],
									"Effect": "Allow"
								}
							  ]
						    }
						  }
						]
					  }
					},
					
					"instanceProfileXappXsim" : {
					  "Type" : "AWS::IAM::InstanceProfile",
					  "Properties" : {
						"Path" : "/",
						"Roles" : [ { "Ref" : "roleXappXsimXinstance" } ]
					  }
					},
					
					"roleXappXsimXservice": {
					  "Type" : "AWS::IAM::Role",
					  "Properties" : {
						"AssumeRolePolicyDocument" : {
						  "Version": "2012-10-17",
						  "Statement": [ {
							"Effect": "Allow",
							"Principal": { "Service": [ "ecs.amazonaws.com" ] },
							"Action": [ "sts:AssumeRole" ]
						  } ]
						},
						"Path": "/",
						"ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"]
					  }
					},

					"asgXappXsim": {
					  "Type": "AWS::AutoScaling::AutoScalingGroup",
					  "Metadata": {
						"AWS::CloudFormation::Init": {
						  "configSets" : {
							"ecs" : ["dirs", "bootstrap", "ecs"]
						  },
						  "dirs": {
							"commands": {
							  "01Directories" : {
								"command" : "mkdir --parents --mode=0755 /etc/gosource && mkdir --parents --mode=0700 /opt/gosource/bootstrap && mkdir --parents --mode=0755 /var/log/gosource",
								"ignoreErrors" : "false"
							  }
							}
						  },
						  "bootstrap": {		  
							"packages" : {
								"yum" : {
									"aws-cli" : []
								}
							},
							"files" : {
							  "/etc/gosource/facts.sh" : {
								"content" : { "Fn::Join" : ["", [
										"#!/bin/bash\n",
										"echo \"gs:account=ct01\"\n",
										"echo \"gs:project=twain\"\n",
										"echo \"gs:container=preprod\"\n",
										"echo \"gs:environment=preprod\"\n",
										"echo \"gs:tier=app\"\n",
										"echo \"gs:component=sim\"\n",
										"echo \"gs:role=ECS\"\n",
										"echo \"gs:credentials=credentials.ct01.gosource.com.au\"\n",
										"echo \"gs:code=code.ct01.gosource.com.au\"\n",
										"echo \"gs:configuration=configuration.ct01.gosource.com.au\"\n",
										"echo \"gs:logs=logs.ct01.gosource.com.au\"\n",
										"echo \"gs:backup=backup.ct01.gosource.com.au\"\n",
										"echo \"gs:region=ap-southeast-2\"\n"
									]]
								},
								"mode" : "000755"
							  },
							  "/opt/gosource/bootstrap/fetch.sh" : {
								"content" : { "Fn::Join" : ["", [
										"#!/bin/bash -ex\n",
										"exec > >(tee /var/log/gosource/fetch.log|logger -t gosource-fetch -s 2>/dev/console) 2>&1\n",
										"REGION=$(/etc/gosource/facts.sh | grep gs:region | cut -d '=' -f 2)\n",
										"CODE=$(/etc/gosource/facts.sh | grep gs:code | cut -d '=' -f 2)\n",
										"aws --region ${REGION} s3 sync s3://${CODE}/bootstrap/centos/ /opt/gosource/bootstrap && chmod 0500 /opt/gosource/bootstrap/*.sh\n"
									]]
								},
								"mode" : "000755"
							  }
							},
							"commands": {
							  "01Fetch" : {
								"command" : "/opt/gosource/bootstrap/fetch.sh",
								"ignoreErrors" : "false"
							  },
							  "02Initialise" : {
								"command" : "/opt/gosource/bootstrap/init.sh",
								"ignoreErrors" : "false"
							  }
							}
						  },
						  "ecs": {
							"commands": {
								"01ConfigureCluster" : {
									"command" : "/opt/gosource/bootstrap/ecs.sh",
									"env" : { "ECS_CLUSTER" : { "Ref" : "ecsXappXsim" } },
									"ignoreErrors" : "false"
								}
							}
						  }
						}
					  },
					  "Properties": {
						"Cooldown" : "30",
						"LaunchConfigurationName": {"Ref": "launchConfigXappXsim"},
							"MinSize": "1",
							"MaxSize": "1",
							"DesiredCapacity": "1",
							"VPCZoneIdentifier" : ["subnet-dac9fdad"],
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:project", "Value" : "twain", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:container", "Value" : "preprod", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:environment", "Value" : "preprod", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:category", "Value" : "stg", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:tier", "Value" : "app", "PropagateAtLaunch" : "True" },
							{ "Key" : "gs:component", "Value" : "sim", "PropagateAtLaunch" : "True"},
							{ "Key" : "Name", "Value" : "twain-preproduction-application-sim", "PropagateAtLaunch" : "True" }
						]
					  }
					},
				
					"launchConfigXappXsim": {
					  "Type": "AWS::AutoScaling::LaunchConfiguration",
					  "Properties": {
						"KeyName": "twain",
						"ImageId": "ami-313d2150",
						"InstanceType": "t2.micro",
						"SecurityGroups" : [ {"Ref" : "securityGroupXappXsim"} , "sg-76e10111" ], 
						"IamInstanceProfile" : { "Ref" : "instanceProfileXappXsim" },
						"AssociatePublicIpAddress": false,
						"UserData":{ "Fn::Base64" : { "Fn::Join" : ["", [
							"#!/bin/bash -ex\n",
							"exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\n",
							"yum install -y aws-cfn-bootstrap\n",
							"# Remainder of configuration via metadata\n",
							"/opt/aws/bin/cfn-init -v",
							"         --stack ", { "Ref" : "AWS::StackName" },
							"         --resource asgXappXsim",
							"         --region us-west-2 --configsets ecs\n"
							] ] } }
					  }
					}
				,
				"securityGroupXdbXmySQL" : {
				  "Type" : "AWS::EC2::SecurityGroup",
				  "Properties" : {
					"GroupDescription": "Security Group for database-mySQL",
					"VpcId": "vpc-ca676baf",
					"Tags" : [
						{ "Key" : "gs:account", "Value" : "ct01" },
						{ "Key" : "gs:project", "Value" : "twain" },
						{ "Key" : "gs:container", "Value" : "preprod" },
						{ "Key" : "gs:environment", "Value" : "preprod" },
						{ "Key" : "gs:category", "Value" : "stg" },
						{ "Key" : "gs:tier", "Value" : "db" },
						{ "Key" : "gs:component", "Value" : "mySQL" },
						{ "Key" : "Name", "Value" : "twain-preproduction-database-mySQL" }
					]
				  }
				},
					"securityGroupIngressXdbXmySQL" : {
					  "Type" : "AWS::EC2::SecurityGroupIngress",
					  "Properties" : {
						"GroupId": {"Ref" : "securityGroupXdbXmySQL"},
						"IpProtocol": "tcp", 
						"FromPort": "3306", 
						"ToPort": "3306", 
						"CidrIp": "0.0.0.0/0"
					  }
					},
					"rdsSubnetGroupXdbXmySQL" : {
						"Type" : "AWS::RDS::DBSubnetGroup",
						"Properties" : {
							"DBSubnetGroupDescription" : "twain-preproduction-database-mySQL",
							"SubnetIds" : [ 
									"subnet-dcc9fdab",
									"subnet-f52b3890",
									"subnet-05db965c"
							],
							"Tags" : [
								{ "Key" : "gs:account", "Value" : "ct01" },
								{ "Key" : "gs:project", "Value" : "twain" },
								{ "Key" : "gs:container", "Value" : "preprod" },
								{ "Key" : "gs:environment", "Value" : "preprod" },
								{ "Key" : "gs:category", "Value" : "stg" },
								{ "Key" : "gs:tier", "Value" : "db" },
								{ "Key" : "gs:component", "Value" : "mySQL" },
								{ "Key" : "Name", "Value" : "twain-preproduction-database-mySQL" } 
							]
						}
					},
					"rdsParameterGroupXdbXmySQL" : {
						"Type" : "AWS::RDS::DBParameterGroup",
						"Properties" : {
							"Family" : "mysql5.6",
							"Description" : "Parameter group for db/mySQL",
							"Parameters" : {
							},
							"Tags" : [
								{ "Key" : "gs:account", "Value" : "ct01" },
								{ "Key" : "gs:project", "Value" : "twain" },
								{ "Key" : "gs:container", "Value" : "preprod" },
								{ "Key" : "gs:environment", "Value" : "preprod" },
								{ "Key" : "gs:category", "Value" : "stg" },
								{ "Key" : "gs:tier", "Value" : "db" },
								{ "Key" : "gs:component", "Value" : "mySQL" },
								{ "Key" : "Name", "Value" : "twain-preproduction-database-mySQL" } 
							]
						}
					},
					"rdsOptionGroupXdbXmySQL" : {
						"Type" : "AWS::RDS::OptionGroup",
						"Properties" : {
							"EngineName": "mysql",
							"MajorEngineVersion": "5.6",
							"OptionGroupDescription" : "Option group for db/mySQL",
							"OptionConfigurations" : [
							],
							"Tags" : [
								{ "Key" : "gs:account", "Value" : "ct01" },
								{ "Key" : "gs:project", "Value" : "twain" },
								{ "Key" : "gs:container", "Value" : "preprod" },
								{ "Key" : "gs:environment", "Value" : "preprod" },
								{ "Key" : "gs:category", "Value" : "stg" },
								{ "Key" : "gs:tier", "Value" : "db" },
								{ "Key" : "gs:component", "Value" : "mySQL" },
								{ "Key" : "Name", "Value" : "twain-preproduction-database-mySQL" } 
							]
						}
					},
					"rdsXdbXmySQL":{
					  "Type":"AWS::RDS::DBInstance",
					  "Properties":{
						"Engine": "mysql",
						"DBInstanceClass" : "db.t2.small",
						"AllocatedStorage": "100",
						"Port" : "3306",
						"MasterUsername": "root",
						"MasterUserPassword": "HHFRrYKvSCB5ZVdDTUvS",
						"BackupRetentionPeriod" : "35",
						"DBInstanceIdentifier": "twain-preproduction-database-mySQL",
						"DBName": "twain",
						"DBSubnetGroupName": { "Ref" : "rdsSubnetGroupXdbXmySQL" },
						"DBParameterGroupName": { "Ref" : "rdsParameterGroupXdbXmySQL" },
						"OptionGroupName": { "Ref" : "rdsOptionGroupXdbXmySQL" },
							"AvailabilityZone" : "us-west-2a",
						"VPCSecurityGroups":[
							{ "Ref" : "securityGroupXdbXmySQL" }
						],
						"Tags" : [
							{ "Key" : "gs:account", "Value" : "ct01" },
							{ "Key" : "gs:project", "Value" : "twain" },
							{ "Key" : "gs:container", "Value" : "preprod" },
							{ "Key" : "gs:environment", "Value" : "preprod" },
							{ "Key" : "gs:category", "Value" : "stg" },
							{ "Key" : "gs:tier", "Value" : "db" },
							{ "Key" : "gs:component", "Value" : "mySQL" },
							{ "Key" : "Name", "Value" : "twain-preproduction-database-mySQL" } 
						]
					  }
					}
  },

  "Outputs" : 
  {
					
					"elbXelbXwww" : {
						"Value" : { "Ref" : "elbXelbXwww" }
					},
					"elbXelbXwwwXdns" : {
						"Value" : { "Fn::GetAtt" : ["elbXelbXwww", "DNSName"] }
					}
					,
					"elbXelbXagent" : {
						"Value" : { "Ref" : "elbXelbXagent" }
					},
					"elbXelbXagentXdns" : {
						"Value" : { "Fn::GetAtt" : ["elbXelbXagent", "DNSName"] }
					}
					,
					"elbXelbXsim" : {
						"Value" : { "Ref" : "elbXelbXsim" }
					},
					"elbXelbXsimXdns" : {
						"Value" : { "Fn::GetAtt" : ["elbXelbXsim", "DNSName"] }
					}
					,
					"ecsXwebXwww" : {
						"Value" : { "Ref" : "ecsXwebXwww" }
					},
					"roleXwebXwwwXservice" : {
						"Value" : { "Ref" : "roleXwebXwwwXservice" }
					},
					"roleXwebXwwwXserviceXarn" : {
						"Value" : { "Fn::GetAtt" : ["roleXwebXwwwXservice", "Arn"] }
					}
					,
					"ecsXappXagent" : {
						"Value" : { "Ref" : "ecsXappXagent" }
					},
					"roleXappXagentXservice" : {
						"Value" : { "Ref" : "roleXappXagentXservice" }
					},
					"roleXappXagentXserviceXarn" : {
						"Value" : { "Fn::GetAtt" : ["roleXappXagentXservice", "Arn"] }
					}
					,
					"ecsXappXsim" : {
						"Value" : { "Ref" : "ecsXappXsim" }
					},
					"roleXappXsimXservice" : {
						"Value" : { "Ref" : "roleXappXsimXservice" }
					},
					"roleXappXsimXserviceXarn" : {
						"Value" : { "Fn::GetAtt" : ["roleXappXsimXservice", "Arn"] }
					}
					,
					"rdsXdbXmySQLXdns" : {
						"Value" : { "Fn::GetAtt" : ["rdsXdbXmySQL", "Endpoint.Address"] }
					},
					"rdsXdbXmySQLXport" : {
						"Value" : { "Fn::GetAtt" : ["rdsXdbXmySQL", "Endpoint.Port"] }
					},
					"rdsXdbXmySQLXdatabasename" : {
						"Value" : "twain"
					},
					"rdsXdbXmySQLXusername" : {
						"Value" : "root"
					},
					"rdsXdbXmySQLXpassword" : {
						"Value" : "HHFRrYKvSCB5ZVdDTUvS"
					}

  }
}


